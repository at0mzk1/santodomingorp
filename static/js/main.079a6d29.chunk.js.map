{"version":3,"sources":["common/header.component.jsx","common/modal.component.jsx","util/api.js","App.js","serviceWorker.js","index.js"],"names":["Header","color","dark","expand","fixed","scrolling","transparent","Component","ModalPage","props","state","modal","centered","isOpen","this","show","size","endpoint","headers","parameter","body","done","fetch","process","join","method","JSON","stringify","then","results","json","AppPage","handleCaptchaResponseChange","token","data","hello","ip","clientIp","that","api","response","setState","recaptchaResponse","google_response","success","bind","lgClose","captcha","ref","el","recaptcha","sitekey","onChange","id","toggle","className","md","type","delay","disabled","href","xl","src","alt","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.079a6d29.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport { MDBNavbar , MDBNavbarBrand, MDBContainer } from 'mdbreact';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport './header.css';\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <div>\r\n                    <MDBNavbar\r\n                    color=\"primary-color\"\r\n                    dark\r\n                    expand=\"md\"\r\n                    fixed=\"top\"\r\n                    scrolling\r\n                    transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand>\r\n                                <strong>SantoDomingoRP</strong>\r\n                            </MDBNavbarBrand>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                </div>\r\n            </Router>        \r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { MDBContainer, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\n\r\nclass ModalPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false\r\n        };\r\n    }\r\n\r\nrender() {\r\n  return (\r\n    <MDBContainer>\r\n      <MDBModal centered isOpen={this.props.show} size=\"lg\">\r\n        <MDBModalHeader>Hemos detectado un Adblocker</MDBModalHeader>\r\n        <MDBModalBody>\r\n          Para poder acceder, por favor deshabilita tu adblocker.\r\n        </MDBModalBody>\r\n        <MDBModalFooter>\r\n          Santo Domingo Roleplay\r\n        </MDBModalFooter>\r\n      </MDBModal>\r\n    </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalPage;","export default {\r\n    get(endpoint, headers, parameter, done) {\r\n        fetch([process.env.REACT_APP_API_HOSTNAME, endpoint, parameter].join(''), {\r\n            headers: headers\r\n        }).then((results) => results.json())\r\n            .then(results => {\r\n            done(results);\r\n            });\r\n        },\r\n    post(endpoint, headers, parameter, body, done) {\r\n        fetch([process.env.REACT_APP_API_HOSTNAME, endpoint, parameter].join(''), {\r\n            headers: headers,\r\n            method: \"POST\",\r\n            body: JSON.stringify(body)\r\n        }).then((results) => results.json())\r\n        .then((results) => {\r\n            done(results)\r\n        })\r\n    },\r\n    getIP(done) {\r\n        fetch('https://api.ipify.org?format=json').then((ip) => ip.json())\r\n            .then(ip => {\r\n                done(ip)\r\n            });\r\n    }\r\n}","import React from \"react\";\nimport Header from './common/header.component';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport AdblockModal from './common/modal.component';\nimport api from './util/api.js';\nimport {\n  MDBMask,\n  MDBRow,\n  MDBCol,\n  MDBBtn,\n  MDBView,\n  MDBContainer,\n  MDBAnimation\n} from \"mdbreact\";\nimport \"./App.css\";\n\nclass AppPage extends React.Component {\n\n  constructor() {\n    super();\n    this.handleCaptchaResponseChange = this.handleCaptchaResponseChange.bind(this);\n    this.lgClose = this.lgClose.bind(this);\n    fetch('https://api.ipify.org?format=json')\n      .then(response => response.json())\n      .then(json => {\n        this.setState({ \n          show: false,\n          clientIp: json.ip,\n        });\n      });\n    this.state = {\n      show: false,\n      recaptchaResponse: false,\n      clientIp: null\n    };\n  }\n\n  lgClose() {\n    this.setState({\n      show: !this.state.show\n    });\n  }\n\n  render() {\n    let captcha;\n    if(this.state.clientIp == null && !this.state.show) {\n      this.lgClose()\n      captcha = null;\n    } else if(this.state.clientIp != null && !this.state.show) {\n      captcha = <ReCAPTCHA\n      ref={(el) => { this.recaptcha = el; }}\n      sitekey=\"6LcTLbUZAAAAAFAMvPGplQeU1_ENim-a-ozDshxu\"\n      onChange={this.handleCaptchaResponseChange}\n      />\n    }\n    return (\n        <div id=\"apppage\">\n          <Header/>\n          <MDBView>\n            <AdblockModal show={this.state.show} toggle={this.lgClose} />\n            <MDBMask className=\"d-flex justify-content-center align-items-center gradient\">\n              <MDBContainer>\n                <MDBRow>\n                  <MDBCol\n                    md=\"6\"\n                    className=\"white-text text-center text-md-left mt-xl-5 mb-5\"\n                  >\n                    <MDBAnimation type=\"fadeInLeft\" delay=\".3s\">\n                      <h1 className=\"h1-responsive font-weight-bold mt-sm-5\">\n                        Santo Domingo RolePlay\n                      </h1>\n                      <hr className=\"hr-light\" />\n                      <h6 className=\"mb-4\">\n                        Tu IP es: {this.state.clientIp}\n                      </h6>\n                      <h6 className=\"mb-4\">\n                        Para poder disfrutar de nuestra ciudad, completa el captcha y\n                        presiona el boton para entrar.\n                      </h6>\n                      {captcha}\n                      <MDBBtn color=\"white\" disabled={!this.state.recaptchaResponse}>\n                        <a href=\"fivem://connect/51.81.49.59:59867\">Entrar</a>\n                      </MDBBtn>\n                    </MDBAnimation>\n                  </MDBCol>\n\n                  <MDBCol md=\"6\" xl=\"5\" className=\"mt-xl-5\">\n                    <MDBAnimation type=\"fadeInRight\" delay=\".3s\">\n                      <img\n                        src=\"https://cdn.discordapp.com/attachments/716150256839950368/735934226268160040/LOGO_610X610_TRANSP.png\"\n                        alt=\"\"\n                        className=\"img-fluid\"\n                      />\n                    </MDBAnimation>\n                  </MDBCol>\n                </MDBRow>\n              </MDBContainer>\n            </MDBMask>\n          </MDBView>\n        </div>\n      );\n  }\n\n  handleCaptchaResponseChange = (token) => {\n    var data = {\n      hello: 'hello',\n      token: token,\n      ip: this.state.clientIp\n    };\n    let that = this;\n    api.post('/send', {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n        }, null, data, function (response) {\n          that.setState({\n            recaptchaResponse: response.google_response.success,\n          });\n        });\n  }\n}\n\n\nexport default AppPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}